<?php

/**
 * @file
 * Message notify.
 */

/**
 * Process and send a message.
 */
function message_notify_send_mail(Message $message, $options = array()) {
  // Set default values.
  $options += array(
    'save on fail' => TRUE,
    'save on success' => TRUE,
    'save rendered subject field' => FALSE,
    'save rendered body field' => FALSE,
  );

  $account = user_load($message->uid);

  $message->rendered_subject = $message->getText($account->language, array('field name' => 'message_text_subject'));
  $message->rendered_body = $message->getText($account->language);

  $wrapper = entity_metadata_wrapper('message', $message);
  if ($options['save rendered subject field']) {
    $wrapper->{$options['save rendered subject field']}->set($message->rendered_subject);
  }
  if ($options['save rendered body field']) {
    // Get the format from the field.
    $format = $wrapper->type->{MESSAGE_FIELD_MESSAGE_TEXT}->format->value();
    $wrapper->{$options['save rendered body field']}->set(array('value' => $message->rendered_body, 'format' => $format));
  }

  $lang = !empty($account->language) ? $languages[$account->language]: language_default();
  $params = array(
    'message_entity' => $message,
    'rendered_subject' => $message->rendered_subject,
    'rendered_body' => $message->rendered_body,
  );
  $result = drupal_mail('message_notify', $message->type, $account->mail, $lang, $params);
  if (!$result) {
    watchdog('message_notify', t('Could not send "@type" email to user ID @uid'), array('@message' => $message->type, '@uid' => $message->uid), WATCHDOG_ERROR);
    if ($options['save on fail']) {
      $message->save();
    }
  }
  elseif ($result && $options['save on success']) {
    $message->save();
  }
  return $result;
}

/**
 * Implements hook_message_view().
 */
function message_notify_message_view($message, $view_mode, $langcode) {
  if ($message->getType()->category == 'message_type_email') {
    $message->content['subject'] = array(
      // Add the subject field.
      '#markup' => $message->getText($langcode, array('field name' => 'message_text_subject')),
    );
  }
}

/**
 * Implements hook_default_message_type_category().
 */
function message_notify_default_message_type_category() {
  $items = array();
  $items['message_type_email'] = entity_import('message_type_category', '{
    "category" : "message_type_email",
    "description" : "Message type email",
    "statusKey" : "status",
    "rdf_mapping" : []
  }');
  return $items;
}

/**
 * Implements hook_mail().
 *
 * Sets the message subject and body as configured.
 */
function message_notify_mail($key, &$message, $params) {
  $message['subject'] = $params['rendered_subject'];
  $message['body'][] = $params['rendered_body'];
}